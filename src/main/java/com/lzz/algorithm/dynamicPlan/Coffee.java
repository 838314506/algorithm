package com.lzz.algorithm.dynamicPlan;

/**
 * 有序
 * 给定一个数组，代表每个人喝完咖啡准备刷杯子的时间
 * 只有一台咖啡机，一次只能洗一个杯子，时间耗费A，洗完才能洗下一杯
 * 每个咖啡杯也可以自己挥发干净，时间耗费b，咖啡杯可以并行挥发
 * 返回让所有咖啡杯变干净的最早完成时间
 * 三个参数：int[]arr,int a,int b
 *
 * 先写出暴力递归版
 * 使用从左到右的尝试再寻找业务限制尝试模型
 */
public class Coffee {
}
